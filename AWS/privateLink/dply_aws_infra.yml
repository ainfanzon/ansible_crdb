---

###
# This Playbook creates all the necessary AWS infrastructure objects to deploy CRDB
#

- name: Creating the AWS Infrastructure for CRDB deployment
  hosts: localhost
  connection: local
  gather_facts: true

  # Import variables in the vars.yml file to customize the deployment 
  vars_files:
    - vars.yml

  tasks:

    # This will generate a new key-pair 
    - name: Creating a new EC2 key-pair
      amazon.aws.ec2_key:
        name: "{{ aws_key_name }}"
        profile: "{{ aws_profile }}"                  # A named AWS profile to use for authentication.
        region: "{{ aws_region }}"                    # The AWS region to use.
      register: ec2_key_result                        # Capture the result in a register variable.
 
    # Download the private key to a local directory
    - name: Save private key
      ansible.builtin.copy:
        content: "{{ ec2_key_result.key.private_key }}"    # Take the private key gernerated above
        dest: "{{ aws_wrk_dir }}/{{ aws_key_name }}.pem"   # Save the key as a .pem file
        mode: 0400                                         # Change file permissions
      when: ec2_key_result.changed

    # Create a new VPC using the values in the vars.yml file
    - name: Creating the "{{ aws_vpc_name }}" VPC
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ aws_vpc_cidr_block }}"
        name: "{{ aws_vpc_name }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        tags:
          Name: "{{ aws_network_name }}"
        state: present
      register: vpc_reg                               # Capture the result in a register variable

    # Display the details of the VPC in JSON format
    - name: Display "{{ aws_vpc_name }}" details
      debug:
        msg: "{{ vpc_reg }}"
    
    # Manage an AWS VPC Internet gateway. Create a new gateway
    - name: Creating the "{{ aws_igw }}" internet gateway
      amazon.aws.ec2_vpc_igw:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region}}"
        tags:
          Name: "{{ aws_igw }}"
        vpc_id: "{{ vpc_reg.vpc.id }}"                # Take the vpc_id from the vpc_reg register variable
        state: present
      register: igw_reg                               # Capture creation details in the register variable

    # Display the details of the getway 
    - name: Display "{{ aws_igw }}" details
      debug:
        msg: "Internet Gateway ID is {{ igw_reg }}"

    # Manage subnets in AWS virtual private clouds.
    - name: Creating the "{{ aws_vpc_subnet_name }}" subnet
      amazon.aws.ec2_vpc_subnet:
        cidr: "{{ aws_subnet_cidr_block }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        state: present
        tags:
          Name: "{{ aws_vpc_subnet_name }}"
        vpc_id: "{{ vpc_reg.vpc.id }}"                # Take the vpc_id from the vpc_reg register variable
      register: subnet_reg                            # Capture creation details in the register variable

    # Display the details of the subnet
    - name: Output "{{ aws_vpc_subnet_name }}" details
      debug:
        msg: "Subnet ID is {{ subnet_reg }}"
    
    # Manage route tables for AWS Virtual Private Clouds (VPCs).
    - name: Creating the "{{ aws_route_table_name }}" VPC Public Subnet Route Table
      amazon.aws.ec2_vpc_route_table:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        tags:
          Name: "{{ aws_route_table_name }}"
        subnets: [ "{{ subnet_reg.subnet.id }}" ]     # Take the subnet_id from the subnet_reg register variable
        routes:
          - dest: "{{ aws_route_table_cidr }}"
            gateway_id: "{{ igw_reg.gateway_id }}"    # Take the subnet_id from the subnet_reg register variable
        state: present
        vpc_id: "{{ vpc_reg.vpc.id }}"                # Take the vpc_id from the vpc_reg register variable
      register: pub_route_table_reg                   # Capture creation details in the register variable

    # Display the details of the routing table
    - name: Output "{{ aws_route_table_name }}" details
      debug:
        msg: "Subnet ID is {{ pub_route_table_reg }}"
    
    # Maintains EC2 security groups.
    - name: Creating the "{{ aws_security_group }}" security group
      amazon.aws.ec2_security_group:
        description: "This is the aim_ansible_secgrp security group for CockroachDB"
        name: "{{ aws_security_group }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
              - 8000
              - "{{ crdb_sql_strt_port }}"
              - "{{ crdb_http_strt_port }}"
            cidr_ip: "{{ aws_security_group_cidr_ingress }}"
        rules_egress:
          - proto: all
            cidr_ip: "{{ aws_security_group_cidr_egress }}"
        tags:
          Name: "{{ aws_security_group }}"
        vpc_id: "{{ vpc_reg.vpc.id }}"                # Take the vpc_id from the vpc_reg register variable
      register: sec_grp_reg                           # Capture creation details in the register variable

    # Display the details of the security group
    - name: Output "{{ aws_security_group }}" details
      debug:
        msg: "Security Group ID is {{ sec_grp_reg }}"

    # Creates/Deletes AWS VPC endpoints.
    - name: Creating the "{{ aws_endpoint_name }}" vpc endpoint 
      amazon.aws.ec2_vpc_endpoint:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        service: "{{ crdb_service_name }}"
        state: present
        tags:
          Name: "{{ aws_endpoint_name }}"
        vpc_id: "{{ vpc_reg.vpc.id }}"                # Take the vpc_id from the vpc_reg register variable
        vpc_endpoint_type: "{{ aws_endpoint_type }}"
        vpc_endpoint_subnets:
          - "{{ subnet_reg.subnet.id }}"
        vpc_endpoint_security_groups: 
          - "{{ sec_grp_reg.group_id }}"
      register: vpc_endpoint_reg                      # Capture creation details in the register variable

    # Display the details of the endpoint
    - name: Output "{{ aws_endpoint_name }}" details
      debug:
        msg: "Endpoint in {{ vpc_endpoint_reg }}"

    # Create and manage AWS EC2 instances.
    - name: Launch instance
      amazon.aws.ec2_instance:
        count: "{{ aws_inst_count }}" 
        image_id: "{{ aws_image_id }}"
        instance_type: "{{ aws_instance_type }}"
        key_name: "{{ aws_key_name }}"
        name: "{{ aws_ec2_name_tag }}"
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        security_group: "{{ sec_grp_reg.group_id }}"     # Take the group_id from the sec_grp_reg register variable
        subnet_id: "{{ subnet_reg.subnet.id }}"          # Take the subnet.id from the subnet_reg register variable
        network_interfaces:
          - assign_public_ip: true
        tags:
          Environment: "{{ aws_ec2_env_tag }}"
        volumes:                                       # Add a 60GB device to the ec2 instance
          - device_name: /dev/sda1
            ebs:
              volume_size: 60
              delete_on_termination: true
        wait: yes
      register: ec2

    # Display the details of the ec2 instances
    - name: Output Instance Details
      debug:
        msg: "Instance ID is {{ ec2.instances[0].instance_id }}"
